@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
<script src="js/landing.js"></script>

<div class="absolute fixed bg-white top-0 w-full transition-all duration-300 @((IsScrolled)?"h-48":"h-56") pt-20 flex flex-col justify-between items-center px-5">
    <div class="text-5xl font-bold text-primary transition-all duration-300 @((IsScrolled)?"-mt-5":"")">
        Oasis
    </div>
    <div class="flex h-full  transition-all duration-400 @((IsScrolled)? "w-150 text-1xl":"w-200 text-xl") justify-evenly items-center text-primary font-montserrat">
        <p class="cursor-pointer">Home</p>
        <p @onclick='() => ScrollToSection("rooms")' class="cursor-pointer">Rooms</p>
        <p @onclick='() => ScrollToSection("services")' class="cursor-pointer">Services</p>
        <p @onclick='() => ScrollToSection("about")' class="cursor-pointer">About</p>
        <p @onclick='() => ScrollToSection("contact")' class="cursor-pointer">Contact</p>
        <NavLink href="signin">
        <button class="cursor-pointer w-35 h-13 rounded-full bg-primary hover:bg-primary/75 transition-colors duration-300 text-white font-bold">
            Sign In
        </button>
        </NavLink>
    </div>
</div>


@code {
    private async Task ScrollToSection(string id)
    {
        await JSRuntime.InvokeVoidAsync("scrollToSection", id);
    }

    private bool IsScrolled = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("addScrollEvent", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public void OnScroll(int scrollPos)
    {
        IsScrolled = scrollPos > 50; // Change 50 to your scroll threshold
        StateHasChanged();
    }


}
