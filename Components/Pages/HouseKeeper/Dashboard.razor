@page "/dashboard/housekeeper"
@rendermode InteractiveServer
@using Oasis.Library
@using Oasis.Data.Object
@using Oasis.Data.Models
@inject HouseKeepingServices housekeepingServices
@inject RoomServices roomServices
@using Oasis.Components.ui
@using System.Text.Json
<div class="bg-background font-montserrat flex h-screen max-w-screen flex-col">
    <Navbar />
    <div class="h-full w-4/5 z-1">

        <div class="h-100 flex flex-row">
            <div class="w-3/5 h-full flex flex-col">
                <div class="flex w-full h-25 justify-between">
                    <div class="flex h-full w-1/2 rounded-2xl bg-white shadow-md shadow-gray-300 px-5">
                        <div class=" h-4/5 w-full items-start flex justify-between">
                            <p>Total Rooms Cleaned</p>
                            <p class=" text-3xl font-bold">@(allCleanedRoomsCount)</p>
                            <div class="flex h-15 aspect-square justify-center rounded-full bg-[#D1FAE5]">
                                <Icon Name="check" Size="50px" Color="#059669" />
                            </div>
                        </div>
                    </div>
                    <div class="flex h-full w-1/2 rounded-2xl bg-white shadow-md shadow-gray-300 px-5">
                        <div class=" h-4/5 w-full items-start flex justify-between">
                            <p>Rooms to Clean</p>
                            <p class="text-3xl font-bold">@(roomsToBeCleaned)</p>
                            <div class="bg-[#DBEAFE] p-3 flex justify-center h-15 aspect-square rounded-full">
                                <img src="icons/broom.png" alt="..." class="p-1" />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="border-0 h-full w-full h-75 rounded-2xl bg-white p-2">
                    <p class="px-4 pb-4 pt-2 text-3xl font-bold">Cleaned Weekly</p>
                    <CustomChart>
                        <div class="w-[1000px] absolute -ml-15   -mt-15 ">
                            <Chart Option="@lineOption" Width="1040px" Height="330px" />

                        </div>
                    </CustomChart>
                </div>

            </div>
            <div class="border-0 box-content h-full w-2/5 rounded-2xl bg-white">
                <p class="p-6 text-3xl font-bold">Rooms Cleaned</p>
                <CustomChart>
                    <div class="w-[720px] absolute -ml-5 -mt-17.5 ">
                        <Chart Option="@verticalBarOption" Width="660px" Height="420px" />

                    </div>
                </CustomChart>
            </div>
        </div>
        <div class="mt-3 flex flex-row z-1 mb-5">
            <div class="border-0 box-content w-5/5 rounded-2xl bg-white p-2">
                <p class="px-6 py-2 text-3xl font-bold">Recently Cleaned</p>
                <div class="w-full flex justify-center px-6">
                    <table class="w-full divide-y divide-gray-300">
                        <tr class="w-full text-sm text-gray-700 h-10 bg-gray-200">
                            <td class="w-1/3 text-center">Housekeeper</td>
                            <td class="w-1/5 text-center">Room</td>
                            <td class="w-1/4 text-center">Start Time</td>
                            <td class="w-1/4 text-center">End Time</td>
                        </tr>
                        @if(cleanedRooms.Count() > 0)
                        {

                            @foreach (var cleanRoom in cleanedRooms)
                            {
                                <tr class="w-full ">
                                    <td class="flex flex-row w-full px-5 h-15">
                                        <div class="w-full flex flex-row">

                                            <div class="h-10 aspect-square rounded-full bg-cover bg-white border-2 border-gray-500 shadow-md" style="background-image: url('@(cleanRoom.user_gender?.ToLower() == "male" ? "/male-housekeeper.png" : "/female-housekeeper.png")"></div>
                                            <p>@(cleanRoom.user_fname) @(cleanRoom.user_lname)</p>
                                        </div>
                                    </td>
                                    <td class="w-1/5 text-center">@(cleanRoom.room_no)</td>
                                    <td class="w-1/4 text-center">@(cleanRoom.housekeeping_starttime)</td>
                                    <td class="w-1/4 text-center">@(cleanRoom.housekeeping_endtime)</td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="4" class=" text-center h-15">No record.</td>
                            </tr>
                        }
                    </table>
                </div>
            </div>
        </div>

    </div>
    <div style="clip-path: polygon(100% 75%, 100% 100%, 30% 100%)" class="w-full h-full bg-[#2563EB] z-0 fixed top-0"></div>
    <div style="clip-path: polygon(0 75%, 0 100%, 75% 100%)" class="w-full h-full bg-primary z-0 fixed top-0"></div>
</div>
@code{
    private List<HouseKeepingRoom> allCleanedRooms = new List<HouseKeepingRoom>();
    private List<HouseKeepingRoom> cleanedRooms = new List<HouseKeepingRoom>();
    private List<Room> toBeCleaned = new List<Room>();
    private int allCleanedRoomsCount = 0;
    private int roomsToBeCleaned = 0;
    private string chartColor = "#0062FF";
    private string? lineOption, verticalBarOption;
    public void LineChartInitialize(Dictionary<string, int> data)
    {

        var option = new
        {
            tooltip = new
            {
                trigger = "axis",
                formatter = "{c}" // Shows "Month: Value" on hover
            },
            xAxis = new
            {
                type = "category",
                data = data.Keys.ToArray()
            },
            yAxis = new
            {
                type = "value"
            },
            series = new[]
    {
    new
    {
        type = "line",
        data = data.Values.ToArray(),
        symbolSize = 12,
        itemStyle = new
        {
            color = chartColor, 
            borderColor = chartColor,
            borderWidth = 5 
        },
        lineStyle = new
        {
            color = chartColor,
            width = 3 // Thicker line (default is 1)
        },
    }
}
        };


        lineOption = JsonSerializer.Serialize(option);
        Console.WriteLine(lineOption);

    }

    public void VerticalBarChartInitialize(Dictionary<string, int> data)
    {
        var option = new
        {
            tooltip = new
            {
                trigger = "axis",
                axisPointer = new { type = "shadow" }, // Better hover effect
                formatter = "{b}: {c}" // Shows "Month: Value"
            },
            yAxis = new
            {
                type = "value"
            },
            xAxis = new
            {
                type = "category",
                data = data.Keys.ToArray()
            },
            series = new[]
    {
    new
    {
        type = "bar",
        data = data.Values.ToArray(),
        itemStyle = new
        {
            color = chartColor, 
            borderColor = chartColor, 
            borderWidth = 1
        },
        barWidth = "60%", // Adjust bar thickness
        label = new
        {
            show = true,
            position = "top", // Values on the right of bars
            formatter = "{c}"
        }
    }
}
        };


        verticalBarOption = JsonSerializer.Serialize(option);
        Console.WriteLine(verticalBarOption);
    }
    protected override async Task OnInitializedAsync()
    {
        allCleanedRoomsCount = (await housekeepingServices.GetRecentlyCleanedRooms()).Count();
        roomsToBeCleaned = await roomServices.GetNumberOfRoomsByStatus("Needs Cleaning");
        cleanedRooms = await housekeepingServices.GetRecentlyCleanedRooms(5);
        Console.WriteLine($"cleaned rooms: {System.Text.Json.JsonSerializer.Serialize(cleanedRooms)}");
        Dictionary<string, int> totalRoomsCleaned = new Dictionary<string, int>();
        Dictionary<string, int> roomsCleanedWeekly = new Dictionary<string, int>();
        totalRoomsCleaned = await housekeepingServices.GetRoomsCleanedByType();
        roomsCleanedWeekly = await housekeepingServices.GetRoomsCleanedLast7Days();
        LineChartInitialize(roomsCleanedWeekly);
        VerticalBarChartInitialize(totalRoomsCleaned);
    }
}