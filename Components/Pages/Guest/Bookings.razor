@page "/bookings"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject ReviewServices ReviewService
@inject NotificationSevices NotificationService
@inject ReservationServices ReservationService
@inject UserState UserState
@inject AppState AppState
@using Oasis.State
@using Oasis.Data.Object
@using Oasis.Data.Models
@using Oasis.Library
@using System.Text
@using Oasis.Components.ui

<div class="w-full bg-[#F5F5F5] font-montserrat">
    <GuestNavbar />

    @* If No Bookings *@
    @if (guestBookings.Count == 0){
        <div class="flex flex-col items-center justify-center h-screen">
            <div class="text-center">
                <Icon Name="hotel" Size="80px" Color="#2563EB" Class="mb-4" />
                <h1 class="text-3xl font-bold text-gray-800 mb-2">No Bookings Yet</h1>
                <p class="text-gray-600 mb-6">You haven't made any reservations yet.</p>
                <button @onclick='() => NavigationManager.NavigateTo("/dashboard/guest")'
                        class="px-6 py-3 bg-primary text-white rounded-lg hover:bg-primary/80 transition-colors duration-300">
                    Browse Rooms
                </button>
            </div>
        </div>
        
    }
    else{
        <div class="flex flex-col justify-between mt-10 px-60 pb-10">
        <p class="w-full font-bold text-2xl z-1	">My Booking</p>
        @foreach(var booking in guestBookings)
        {
            if (booking.rsv_status == "Checked Out" || booking.rsv_status == "Cancelled") continue;
            <div class="w-full flex flex-row justify-center z-1">
                <div class="w-2/3 h-100 rounded-2xl bg-center bg-cover" style="background-image: url('@GetImageSelectedBooking(selectedBooking.type_category)')"></div>
                <div class="w-1/3 h-100 rounded-2xl bg-white p-10 border border-gray-300 shadow-sm">
                    <p class="w-full font-bold text-2xl">@(booking.type_category) Room</p>
                    <div class="w-full h-13 flex flex-row justify-between">
                        <p>Guest</p>
                        <p class="text-gray-400">@(currentUser.user_fname + " " + currentUser.user_lname)</p>
                    </div>
                    <div class="w-full h-13 flex flex-row justify-between">
                        <p>Room Number</p>
                        <p class="text-gray-400">@(booking.room_no)</p>
                    </div>
                    <div class="w-full h-13 flex flex-row justify-between">
                        <p>Check In</p>
                        <p class="text-gray-400">@(booking.rsv_checkin)</p>
                    </div>
                    <div class="w-full h-13 flex flex-row justify-between">
                        <p>Check Out</p>
                        <p class="text-gray-400">@(booking.rsv_checkout)</p>
                    </div>
                    <div class="w-full h-[1px] bg-gray-300"></div>
                    <div class="w-full h-13 flex flex-row justify-between">
                        <p>Total Amount</p>
                        <p class="text-[#0040A6]">@(booking.payment_amount.ToString("N2"))</p>
                    </div>
                    <div class="w-full flex flex-col justify-center">
                        @if(booking.rsv_status == "Checked In")
                        {
                            <button @onclick='() => OpenExtendBookingDialog(booking)' class="w-3/4 h-10 rounded-2xl border-2 border-[#2563EB] bg-[#2563EB] text-white cursor-pointer">Extend</button>

                        }
                        else
                        {
                            <button @onclick='() => ShowConfirmationDialog("cancel", "Are you sure you want to cancel this booking?")' class="w-3/4 h-10 rounded-2xl  border-2 border-[#2563EB] bg-white text-[#2563EB] cursor-pointer">Cancel</button>

                        }
                    </div>
                </div>
            </div>
        }
        @if(guestBookings.Where(r => r.rsv_status == "Checked Out" || r.rsv_status == "Cancelled").Count() > 0)
		{


        <div class="w-full bg-white rounded-2xl px-10 pb-10 mb-5  border border-gray-300 shadow-sm  z-1">
            <div class="w-full h-20 flex flex-col justify-center"><p class="w-full font-bold text-2xl">History</p></div>
            <table class="w-full divide-y divide-gray-400">
                <thead>
                    <tr class="text-center text-[#6B7280] h-10 bg-gray-100">
                        <td>Room</td>
                        <td>Room Type</td>
                        <td>Check In</td>
                        <td>Check Out</td>
                        <td>Status</td>
                        <td>Amount</td>
                        <td></td>
                    </tr>
                </thead>
                @foreach(var booking in guestBookings.Where(r => r.rsv_status == "Checked Out" || r.rsv_status == "Cancelled"))
                {
                    <tr class="text-center h-15 ">
                        <td>@booking.room_no</td>
                        <td>@booking.type_category</td>
                        <td>@booking.rsv_checkin</td>
                        <td>@booking.rsv_checkout</td>
                        <td>@booking.rsv_status</td>
                        <td>@booking.payment_amount.ToString("N2")</td>
                        <td class="w-1/12">
                            <div class="w-full  h-full flex justify-center">
                                @if(booking.rsv_status == "Checked Out" && booking.review_id == 0){
                                    <button @onclick='()=> ReviewClicked(booking.rsv_id)' class="w-full px-2 h-full py-2 bg-primary  border-primary text-white hover:bg-primary/80 transition-all duration-300 cursor-pointer rounded-md">Review</button>

                                }
                                else if(booking.rsv_status == "Checked Out" && booking.review_id != 0)
                                {
                                    <button @onclick='()=> ViewReviewClicked(booking.review_id)' class="w-full text-sm h-full py-2 border border-primary text-primary hover:border-primary/80 transition-all duration-300 cursor-pointer rounded-md">View Review</button>
                                }
                            </div>
                        </td>
                    </tr>
                }
            </table>
        </div>
        }
        <div @onclick="CloseReviewDialog" class="fixed inset-0 z-50 bg-black/60  transition-all duration-200 items-center flex justify-center" style="@(reviewOpen ? "opacity: 1;" : "opacity: 0; pointer-events:none;")" >
            <div @onclick:stopPropagation class="shadow-black/50 flex flex-col fixed h-2/3 px-10 z-55 flex w-1/3 gap-4 border bg-background outline-none focus:outline-none border-gray-300  p-6 shadow-lg transition-all duration-200 rounded-lg " style="@(reviewOpen ? "opacity: 1; scale: 1;" : "opacity: 0; scale: 0.95;")">
                <Icon Name="Close" @onclick="CloseReviewDialog" Size="20px" class="absolute top-4 right-4 cursor-pointer" />
                <div class="w-full h-full flex flex-col justify-center">
                    <p class="text-2xl font-bold">Submit Review</p>
                    <div class="flex flex-col gap-2">
                        <div class="flex gap-1">
                            <button class="focus:outline-none" @onclick="() => SetRating(1)">
                                <span class="text-3xl @(currentRating >= 1 ? "text-yellow-300":"text-gray-300")">★</span>
                            </button>
                            <button class="focus:outline-none" @onclick="() => SetRating(2)">
                                <span class="text-3xl @(currentRating >= 2 ? "text-yellow-300":"text-gray-300")">★</span>
                            </button>
                            <button class="focus:outline-none" @onclick="() => SetRating(3)">
                                <span class="text-3xl @(currentRating >= 3 ? "text-yellow-300":"text-gray-300")">★</span>
                            </button>
                            <button class="focus:outline-none" @onclick="() => SetRating(4)">
                                <span class="text-3xl @(currentRating >= 4 ? "text-yellow-300":"text-gray-300")">★</span>
                            </button>
                            <button class="focus:outline-none" @onclick="() => SetRating(5)">
                                <span class="stroke-black text-3xl @(currentRating >= 5 ? "text-yellow-300":"text-gray-300")">★</span>
                            </button>
                        </div>
                        <p class="text-sm text-gray-500">@currentRating out of 5</p>
                    </div>
                    <textarea @bind="reviewText" class="resize-none w-full h-1/2 bg-gray-100 border border-gray-300 p-3 focus:outline-none" placeholder="Write your review..."></textarea>
                    <button @onclick="SubmitReview" class="w-full h-15 rounded-lg bg-primary text-white" disabled="@(currentRating == 0)">Submit</button>
                </div>
            </div>
        </div>
    </div>
}
    <div style="clip-path: polygon(0 0, 0 26%, 25% 0);" class="w-full h-full bg-primary z-0 fixed top-0"></div>
    <div style="clip-path: polygon(100% 0, 100% 26%, 75% 0);" class="w-full h-full bg-primary z-0 fixed top-0"></div>
    <div style="clip-path: polygon(0 74%, 0 100%, 26% 100%);" class="w-full h-full bg-primary z-0 fixed top-0"></div>
    <div style="clip-path: polygon(100% 75%, 100% 100%, 75% 100%);" class="w-full h-full bg-primary z-0 fixed top-0"></div>
</div>
<!-- Extend Booking Dialog -->
<div class="fixed inset-0 z-250 bg-black/60 transition-all duration-200 items-center flex justify-center" style="@(IsExtendBookingDialogOpen ? "opacity: 1;" : "opacity: 0; pointer-events:none;")" @onclick='CloseExtendBookingDialog'>
    <div @onclick:stopPropagation class="shadow-black/50 flex flex-col fixed h-[calc(80%+4rem)] z-55 flex w-[calc(66.66%-200px)] gap-4 border bg-background outline-none focus:outline-none border-gray-300 p-6 shadow-lg transition-all duration-200 rounded-2xl" style="@(IsExtendBookingDialogOpen ? "opacity: 1; scale: 1;" : "opacity: 0; scale: 0.95;")">
        @* Header *@
        <div class="w-full text-4xl pt-4 font-montserrat font-bold text-gray-800 justify-center items-center flex">
            EXTEND BOOKING
        </div>

        @* Progress Steps *@
        <div class="w-full flex flex-col justify-center text-white text-2xl font-montserrat font-medium">
            <div class=" flex flex-row justify-center w-150 -space-x-4">
                <div class=" flex flex-col justify-center w-full">
                    <div class="flex flex-row w-full -space-x-4">
                        <div class="w-full h-[10px] bg-none "></div>
                        <div class="h-[60px] aspect-square @(extendCurrentStep >= 1 ? "bg-[#2563EB]" : "bg-gray-400") rounded-full flex justify-center ml-2">
                            <p class="text-4xl">1</p>
                        </div>
                        <div class="w-full h-[10px] @(extendCurrentStep >= 2 ? "bg-[#2563EB]" : "bg-gray-400") "></div>
                    </div>
                    <p class="w-full text-center text-gray-400 text-sm font-medium self-start">Select New Dates</p>
                </div>
                <div class=" flex flex-col justify-center w-full">
                    <div class="flex flex-row w-full -space-x-4">
                        <div class="w-full h-[10px] @(extendCurrentStep >= 2 ? "bg-[#2563EB]" : "bg-gray-400")"></div>
                        <div class="aspect-square h-[60px] @(extendCurrentStep >= 2 ? "bg-[#2563EB]" : "bg-gray-400") rounded-full flex justify-center">
                            <p class="text-4xl">2</p>
                        </div>
                        <div class="w-full h-[10px] bg-none"></div>
                    </div>
                    <p class="text-center w-full text-gray-400 text-sm font-medium self-end">Payment</p>
                </div>
            </div>
            <div class="w-2/5 h-[2px] bg-gray-200 mt-3"></div>
        </div>

        @* Body Content *@
        <div class="w-full px-2 flex flex-col h-full overflow-y-auto justify-center items-center">
            @if (extendCurrentStep == 1)
            {
                <!-- Date Selection Step -->
                <div class="w-full grid grid-cols-2 h-full p-2 gap-5">
                    <div class="h-full w-full">
                        <div class="w-full h-[530px] bg-cover bg-center rounded-2xl" style="background-image: url('@GetImageSelectedBooking(selectedBooking.type_category)')"></div>
                    </div>

                    <div class="flex flex-col h-full w-full justify-between pb-6">
                        <div class="w-full mt-5">
                            <p class="text-5xl font-bold pb-4 text-gray-700">@selectedBooking.type_category Room</p>
                            <p class="text-primary font-semibold text-xl">Php @GetRoomPrice(selectedBooking.type_category) per night</p>
                            <div class="mt-8 space-y-4 w-full flex flex-col">
                                <div class="w-full flex justify-between text-xl">
                                    <p class="text-gray-600">Guest Name</p>

                                    <p class="text-gray-600">@currentUser.user_fname @currentUser.user_lname</p>
                                </div>
                                <div class="w-full flex justify-between text-xl">
                                    <p class="text-gray-600">Current Check-In Date</p>
                                    <p class="text-gray-600">@selectedBooking.rsv_checkin.ToString("MMM dd, yyyy")</p>

                                </div>
                                <div class="w-full flex justify-between text-xl">
                                    <p class="text-gray-600">Current Check Out Date</p>

                                    <p class="text-gray-600">@selectedBooking.rsv_checkout.ToString("MMM dd, yyyy")</p>
                                </div>
                            </div>
                        </div>
                        <div class="w-full flex flex-col pb-10">
                            @* <CustomDatePicker Placeholder="Check-In Date" @bind-Value="newCheckInDate" Class="w-full pointer-events-none" Id="extendCheckOut" MinDate="@selectedBooking.rsv_checkout.AddDays(1)" /> *@
                            <CustomDatePicker Placeholder="New Check-Out Date"
                            @bind-Value="newCheckOutDate"
                            Class="w-full text-lg"
                            Id="3"
                            MinDate="@selectedBooking.rsv_checkout.AddDays(1)" />
                        </div>

                        <div class="w-full flex justify-between">
                            <button @onclick='CloseExtendBookingDialog' class="w-1/3 h-12 text-primary border-2 border-primary rounded-lg cursor-pointer hover:bg-blue-50 transition-colors duration-400">
                                Cancel
                            </button>
                            <button @onclick='ProceedToExtendPayment' class="w-2/3 h-12 bg-primary text-white rounded-lg cursor-pointer hover:bg-primary/80 transition-colors duration-400" disabled="@(!IsExtendDateValid)">
                                Continue to Payment
                            </button>
                        </div>
                    </div>
                </div>
            }
            else if (extendCurrentStep == 2)
            {
                <!-- Payment Step -->
                <div class="w-full grid grid-cols-2 gap-5 h-full p-2">
                    <div class="flex flex-col gap-5 h-full">
                        <div class="w-full h-full flex flex-col px-1 -space-y-1">
                            <p class="w-full text-lg font-bold text-gray-600 border-b border-gray-600">Cost Breakdown</p>
                            <div class="w-full h-full flex flex-col">
                                <div class="w-full flex flex-row justify-between">
                                    <p class="text-sm text-gray-600">Additional Nights (@selectedBooking.type_category)</p>
                                    <p class="text-sm text-gray-600">@extendAdditionalAmount.ToString("N2")</p>
                                </div>
                            </div>
                            <div class="w-full flex flex-row justify-between border-t pt-2 border-gray-400">
                                <p class="text-sm text-gray-600">Total Additional Cost</p>
                                <p class="text-sm text-gray-600">@extendAdditionalAmount.ToString("N2")</p>
                            </div>
                        </div>
                        <div class="w-full px-1 flex flex-row justify-between">
                            <p class="text-lg font-semibold text-gray-800">Total Amount</p>
                            <p class="text-lg font-bold text-primary">Php @extendAdditionalAmount.ToString("N2")</p>
                        </div>
                    </div>
                    <div class="flex justify-between flex-col gap-5 h-full">
                        <div class="flex flex-col">
                            <p class="text-sm w-full font-medium">Select Payment Method</p>
                            <div class="grid grid-cols-2 w-full gap-4">
                                <div @onclick='() => SelectPaymentMethod("card")' class="w-full h-25 flex flex-row border-2 @(paymentMethod == "card" ? "border-primary bg-blue-50" : "border-gray-400") rounded-lg p-3 cursor-pointer">
                                    <Icon Name="credit_card" Color="#2563EB" />
                                    <div class="w-full flex flex-col justify-start">
                                        <p class="w-full -mb-5 text-md">Credit / Debit Card</p>
                                        <p class="w-full text-xs text-gray-400">Pay securely with your card</p>
                                    </div>
                                </div>
                                <div @onclick='() => SelectPaymentMethod("wallet")' class="w-full h-25 flex flex-row border-2 @(paymentMethod == "wallet" ? "border-primary bg-blue-50" : "border-gray-400") rounded-lg p-3 cursor-pointer">
                                    <Icon Name="wallet" Color="#2563EB" />
                                    <div class="w-full flex flex-col justify-start">
                                        <p class="w-full -mb-5 text-md">Digital Wallet</p>
                                        <p class="w-full text-xs text-gray-400">GCash</p>
                                    </div>
                                </div>
                            </div>
                        </div>

                        @if (paymentMethod == "card")
                        {
                            <div class="flex flex-col gap-4">
                                <div class="flex flex-col w-full">
                                    <label class="w-full text-sm font-medium mb-1">Card Number</label>
                                    <div class="w-full flex h-12 border-2 border-gray-400 px-3 rounded-lg group">
                                        <input @bind:event="oninput" @onkeydown="HandleCardNumberKeyDown" @bind="cardNumber" type="text" placeholder="1234 5678 9012 3456" class="w-full h-12 rounded-lg focus:outline-none focus:border-primary" />
                                        @if (paymentMethod == "card")
                                        {
                                            <div class="flex flex-row px-3">
                                                @if (cardNumber.Length > 0 && cardNumber[0] == '4')
                                                {
                                                    <img src="icons/selected-visa.png" alt="visa" />
                                                    <img src="icons/mastercard.png" alt="mastercard" />
                                                }
                                                else if (cardNumber.Length > 0 && (cardNumber[0] == '5' || cardNumber[0] == '2'))
                                                {
                                                    <img src="icons/visa.png" alt="visa" />
                                                    <img src="icons/selected-mastercard.png" alt="mastercard" />
                                                }
                                                else
                                                {
                                                    <img src="icons/visa.png" alt="visa" />
                                                    <img src="icons/mastercard.png" alt="mastercard" />
                                                }
                                            </div>
                                        }
                                    </div>
                                </div>

                                <div class="flex flex-row gap-4">
                                    <div class="flex-1 flex flex-col">
                                        <label class="w-full text-sm font-medium mb-1">Expiry Date</label>
                                        <input @bind:event="oninput" @onkeydown="HandleExpiryKeyDown" @bind="expiryDate" type="text" placeholder="MM/YY" class="w-full h-12 border-2 border-gray-400 px-3 rounded-lg focus:outline-none focus:border-primary" />
                                    </div>
                                    <div class="flex-1 flex flex-col">
                                        <label class="w-full text-sm font-medium mb-1">CVV</label>
                                        <input @bind:event="oninput" @onkeydown="HandleCVVKeyDown" @bind="cvv" type="text" placeholder="123" class="w-full h-12 border-2 border-gray-400 px-3 rounded-lg focus:outline-none focus:border-primary" />
                                    </div>
                                </div>

                                <div class="flex flex-col w-full">
                                    <label class="w-full text-sm font-medium mb-1">Cardholder Name</label>
                                    <input @bind="cardholderName" type="text" placeholder="John Doe" class="w-full h-12 border-2 border-gray-400 px-3 rounded-lg focus:outline-none focus:border-primary" />
                                </div>
                            </div>
                        }
                        else if (paymentMethod == "wallet")
                        {
                            <div class="flex flex-col space-y-6 w-full pb-10">
                                <div class="flex flex-col w-full">
                                    <label class="w-full text-sm font-medium mb-1">Mobile Number</label>
                                    <input @bind:event="oninput" @onkeydown="HandleMobileNumberKeyDown" @bind="mobileNumber" type="text" placeholder="0912 345 6789" class="w-full h-12 border-2 border-gray-400 px-3 rounded-lg focus:outline-none focus:border-primary" />
                                </div>
                                <div class="flex flex-col w-full">
                                    <label class="w-full text-sm font-medium mb-1">Reference Number</label>
                                    <input @bind="referenceNumber" maxlength="13" type="text" placeholder="1234567890123" class="w-full h-12 border-2 border-gray-400 px-3 rounded-lg focus:outline-none focus:border-primary" />
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="flex flex-col space-y-6 w-2/3">
                                <h1 class="text-primary text-2xl font-bold">Cash Payment</h1>
                                <h3 class="text-center text-gray-500 text-lg">Please collect payment upon guest check-in.</h3>
                            </div>
                        }

                        <div class="w-full flex justify-between mt-5">
                            <button @onclick='BackToExtendDateSelection' class="w-1/3 h-12 text-primary border-2 border-primary rounded-lg cursor-pointer hover:bg-blue-50 transition-colors duration-400">
                                Back
                            </button>
                            <button @onclick='CompleteExtendBooking' class="w-2/3 h-12 bg-primary text-white rounded-lg cursor-pointer hover:bg-primary/80 transition-colors duration-400" disabled="@(!IsPaymentValid)">
                                Complete Extension
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>

        <Icon Name="Close" @onclick='CloseExtendBookingDialog' Size="20px" class="absolute top-4 right-4 cursor-pointer" />
    </div>
</div>
<!-- Confirmation Dialog -->
<div class="fixed inset-0 z-250 bg-black/60 transition-all duration-200 items-center flex justify-center" style="@(IsConfirmationDialogOpen ? "opacity: 1;" : "opacity: 0; pointer-events:none;")" @onclick='CloseConfirmationDialog'>
    <div @onclick:stopPropagation class="shadow-black/50 flex flex-col fixed h-80 z-55 w-126 gap-4 border bg-background outline-none focus:outline-none border-gray-300 p-6 shadow-lg transition-all duration-200 rounded-2xl" style="@(IsConfirmationDialogOpen ? "opacity: 1; scale: 1;" : "opacity: 0; scale: 0.95;")">
        <div class="w-full flex flex-col items-center">
            <Icon Name="warning" Size="40px" Color="#4444EF" Class="mb-4" />
            <p class="text-xl font-bold text-gray-800 mb-2">Confirm Action</p>
            <p class="text-gray-600 text-center mb-6">@confirmationMessage</p>

            <div class="flex gap-4 w-full">
                <button @onclick='CloseConfirmationDialog' class="flex-1 h-12 text-gray-700 border-2 border-gray-400 rounded-lg cursor-pointer hover:bg-gray-100 transition-colors duration-400">
                    Cancel
                </button>
                <button @onclick='ExecuteConfirmedAction' class="flex-1 h-12 bg-primary text-white rounded-lg cursor-pointer hover:bg-primary/80 transition-colors duration-400">
                    Confirm
                </button>
            </div>
        </div>
    </div>
</div>
<!-- View Review Dialog -->
<div @onclick="CloseViewReviewDialog" class="fixed inset-0 z-250 bg-black/60 transition-all duration-200 items-center flex justify-center" style="@(viewReviewOpen ? "opacity: 1;" : "opacity: 0; pointer-events:none;")">
    <div @onclick:stopPropagation class="shadow-black/50 flex flex-col fixed h-2/3 px-10 z-55 w-1/3 gap-4 border bg-background outline-none focus:outline-none border-gray-300 p-6 shadow-lg transition-all duration-200 rounded-lg" style="@(viewReviewOpen ? "opacity: 1; scale: 1;" : "opacity: 0; scale: 0.95;")">
        <Icon Name="Close" @onclick="CloseViewReviewDialog" Size="20px" class="absolute top-4 right-4 cursor-pointer" />
        <div class="w-full h-full flex flex-col justify-center">
            <p class="text-2xl font-bold">Your Review</p>
            <div class="flex flex-col gap-2">
                <div class="flex gap-1">
                    @for (int i = 1; i <= 5; i++)
                    {
                        <span class="text-3xl @(i <= viewedReview?.review_rating ? "text-yellow-300":"text-gray-300")">★</span>
                    }
                </div>
                <p class="text-sm text-gray-500">@(viewedReview?.review_rating ?? 0) out of 5</p>
                <p class="text-sm text-gray-500">Submitted on: @(viewedReview?.review_date)</p>
            </div>
            <div class="w-full h-1/2 bg-gray-100 border border-gray-300 p-3 overflow-y-auto">
                <p class="text-gray-800">@(viewedReview?.review_feedback ?? "")</p>
            </div>
            <button @onclick="CloseViewReviewDialog" class="cursor-pointer w-full h-15 rounded-lg bg-primary text-white mt-4">Close</button>
        </div>
    </div>
</div>
@code {
    private bool viewReviewOpen = false;
    private Review? viewedReview = null;
    private User currentUser = new User();
    private int selectedReviewId;
    private bool IsConfirmationDialogOpen = false;
    private string confirmationMessage = "";
    private string pendingAction = "";
    private bool IsExtendBookingDialogOpen = false;
    private int extendCurrentStep = 1;
    private DateOnly? newCheckOutDate;
    private decimal extendAdditionalAmount = 0;
    private bool reviewOpen = false;
    private int currentRating = 0;
    private string reviewText = string.Empty;
    private string paymentMethod = "card";
    private string _cardNumber = "";
    private string _expiryDate = "";
    private string _cvv = "";
    private string cardholderName = "";
    private string _mobileNumber = "";
    private string referenceNumber = "";
    private List<GuestBooking> guestBookings = new List<GuestBooking>();
    private GuestBooking selectedBooking = new GuestBooking();

    private string cvv
    {
        get => _cvv;
        set
        {
            // Filter to only digits and limit to 4 characters
            var digitsOnly = new string(value?.Where(char.IsDigit).ToArray());
            _cvv = digitsOnly.Length > 4 ? digitsOnly[..4] : digitsOnly;
        }
    }

    private string expiryDate
    {
        get => _expiryDate;
        set
        {
            // Remove all non-digits
            var digitsOnly = new string(value?.Where(char.IsDigit).ToArray());

            // Limit to 4 digits (MMYY)
            if (digitsOnly.Length > 4)
            {
                digitsOnly = digitsOnly[..4];
            }

            // Format as MM/YY
            _expiryDate = digitsOnly.Length switch
            {
                > 2 => $"{digitsOnly[..2]}/{digitsOnly[2..]}",
                _ => digitsOnly
            };
        }
    }
    private string cardNumber
    {
        get => _cardNumber;
        set
        {
            // Remove all non-digits
            var digitsOnly = new string(value?.Where(char.IsDigit).ToArray());

            // Limit to 16 digits
            if (digitsOnly.Length > 16)
            {
                digitsOnly = digitsOnly[..16];
            }

            // Format with spaces every 4 digits
            var formatted = new StringBuilder();
            for (int i = 0; i < digitsOnly.Length; i++)
            {
                if (i > 0 && i % 4 == 0)
                {
                    formatted.Append(' ');
                }
                formatted.Append(digitsOnly[i]);
            }

            _cardNumber = formatted.ToString();
        }
    }
    private string mobileNumber
    {
        get => _mobileNumber;
        set
        {
            // Remove all non-digits
            var digitsOnly = new string(value?.Where(char.IsDigit).ToArray());

            // Limit to 16 digits
            if (digitsOnly.Length > 11)
            {
                digitsOnly = digitsOnly[..11];
            }

            // Format with spaces every 4 digits
            var formatted = new StringBuilder();
            for (int i = 0; i < digitsOnly.Length; i++)
            {
                if (i > 0 && (i == 4 || i == 7))
                {
                    formatted.Append(' ');
                }
                formatted.Append(digitsOnly[i]);
            }

            _mobileNumber = formatted.ToString();
        }
    }
    private void SelectPaymentMethod(string method)
    {
        paymentMethod = method;
    }
    private void HandleCVVKeyDown(KeyboardEventArgs e)
    {
        // Allow: backspace, delete, tab, arrows
        var allowedKeys = new[] { "Backspace", "Delete", "Tab", "ArrowLeft", "ArrowRight" };
        if (allowedKeys.Contains(e.Key)) return;

        // Prevent if not a digit or if at max length
        if (cvv.Length >= 4 || !char.IsDigit(e.Key[0]))
        {
            return;
        }
    }


    private void HandleExpiryKeyDown(KeyboardEventArgs e)
    {
        // Allow control keys
        var allowedKeys = new[] { "Backspace", "Delete", "Tab", "ArrowLeft", "ArrowRight" };
        if (allowedKeys.Contains(e.Key)) return;

        // Prevent if not a digit or if at max length (4 digits = 5 chars with slash)
        if (_expiryDate.Replace("/", "").Length >= 4 || !char.IsDigit(e.Key[0]))
        {
            return;
        }
    }
    private void HandleCardNumberKeyDown(KeyboardEventArgs e)
    {
        // Allow control keys
        var allowedKeys = new[] { "Backspace", "Delete", "Tab", "ArrowLeft", "ArrowRight", " " };
        if (allowedKeys.Contains(e.Key)) return;

        // Prevent if not a digit or if at max length (16 digits)
        if (_cardNumber.Replace(" ", "").Length >= 16 || !char.IsDigit(e.Key[0]))
        {
            return;
        }
    }
    private void HandleMobileNumberKeyDown(KeyboardEventArgs e)
    {
        // Allow control keys
        var allowedKeys = new[] { "Backspace", "Delete", "Tab", "ArrowLeft", "ArrowRight", " " };
        if (allowedKeys.Contains(e.Key)) return;

        // Prevent if not a digit or if at max length (16 digits)
        if (_cardNumber.Replace(" ", "").Length >= 11 || !char.IsDigit(e.Key[0]))
        {
            return;
        }
    }
    private void OpenExtendBookingDialog(GuestBooking booking)
    {
        selectedBooking = booking;
        extendCurrentStep = 1;
        IsExtendBookingDialogOpen = true;
        CalculateExtendAdditionalAmount();
    }
    private void BackToExtendDateSelection()
    {
        extendCurrentStep = 1;
    }
    private async Task ViewReviewClicked(int reviewId)
    {
        viewedReview = await ReviewService.GetReviewById(reviewId);
        if (viewedReview != null)
        {
            viewReviewOpen = true;
        }
    }

    private void CloseViewReviewDialog()
    {
        viewReviewOpen = false;
        viewedReview = null;
    }
    private void ProceedToExtendPayment()
    {
        if (IsExtendDateValid)
        {
            CalculateExtendAdditionalAmount();
            extendCurrentStep = 2;
        }
    }
    private async Task ExecuteConfirmedAction()
    {

        switch (pendingAction)
        {
            case "cancel":
                await CancelBookingConfirmed();
                break;
            case "checkin":
                await CheckInBookingConfirmed();
                break;
        }
        CloseConfirmationDialog();
    }
    private async Task CancelBookingConfirmed()
    {
        await ReservationService.UpdateReservationStatus(selectedBooking.rsv_id, "Cancelled");

        //send notification to staffs
        Oasis.Data.Models.Notification notification = new Oasis.Data.Models.Notification();
        notification.notif_title = "Reservation Cancelled";
        notification.notif_content = $"Reservation by {currentUser.user_fname} {currentUser.user_lname} has been cancelled.";
        notification.notif_date = DateTime.Now;
        notification.notif_status = "unread";
        await NotificationService.AddNotificationToStaffByPosition(notification, "Receptionist");
        guestBookings = await ReservationService.GetReservationsByGuestId(AppState.CurrentUser.user_id);
    }

    private async Task CheckInBookingConfirmed()
    {
        await ReservationService.UpdateReservationStatus(selectedBooking.rsv_id, "Checked In");
        guestBookings = await ReservationService.GetReservationsByGuestId(AppState.CurrentUser.user_id);
    }

    private bool IsPaymentValid
    {
        get
        {
            if (paymentMethod == "card")
            {
                return !string.IsNullOrEmpty(cardNumber) &&
                       !string.IsNullOrEmpty(expiryDate) &&
                       !string.IsNullOrEmpty(cvv) &&
                       !string.IsNullOrEmpty(cardholderName);
            }
            else if (paymentMethod == "wallet")
            {
                return !string.IsNullOrEmpty(mobileNumber);
            }
            else
            {
                return true;
            }
        }
    }
    private async Task CompleteExtendBooking()
    {
        if (IsPaymentValid && newCheckOutDate.HasValue && selectedBooking != null)
        {



            // Update the booking with new checkout date and payment
            bool success = await ReservationService.ExtendReservation(selectedBooking.rsv_id, newCheckOutDate.Value, (double)extendAdditionalAmount);

            if (success)
            {
                //send notification to staffs
                Oasis.Data.Models.Notification notification = new Oasis.Data.Models.Notification();
                notification.notif_title = "Reservation Extended";
                notification.notif_content = $"Reservation by {currentUser.user_fname} {currentUser.user_lname} has been extended.";
                notification.notif_date = DateTime.Now;
                notification.notif_status = "unread";
                await NotificationService.AddNotificationToStaffByPosition(notification, "Receptionist");
                // Refresh bookings
                guestBookings = await ReservationService.GetReservationsByGuestId(AppState.CurrentUser.user_id);


                // Reset state
                CloseExtendBookingDialog();

                // Show success message or notification
                StateHasChanged();
            }
        }
    }
    private void CalculateExtendAdditionalAmount()
    {
        if (newCheckOutDate.HasValue && selectedBooking != null)
        {
            var additionalNights = newCheckOutDate.Value.DayNumber - selectedBooking.rsv_checkout.DayNumber;
            extendAdditionalAmount = additionalNights * GetRoomPrice(selectedBooking.type_category);
        }
    }
    private void CloseExtendBookingDialog()
    {
        IsExtendBookingDialogOpen = false;
        extendCurrentStep = 1;
        newCheckOutDate = null;
        extendAdditionalAmount = 0;
        paymentMethod = "card";
        cardNumber = "";
        expiryDate = "";
        cvv = "";
        cardholderName = "";
        mobileNumber = "";
        referenceNumber = "";
    }
    private async Task ShowConfirmationDialog(string action, string message)
    {
        pendingAction = action;
        confirmationMessage = message;
        IsConfirmationDialogOpen = true;
    }

    private void CloseConfirmationDialog()
    {
        IsConfirmationDialogOpen = false;
        pendingAction = "";
        confirmationMessage = "";
    }
    protected override async Task OnInitializedAsync()
    {
        currentUser = AppState.CurrentUser;
        guestBookings = await ReservationService.GetReservationsByGuestId(AppState.CurrentUser.user_id);
        foreach (var booking in guestBookings)
        {
            
        Console.WriteLine($"guestBookings: {System.Text.Json.JsonSerializer.Serialize(booking)}");

        }
        Console.WriteLine($"Deluxe Reviews: {System.Text.Json.JsonSerializer.Serialize(await ReviewService.GetRoomTypeReviews("Deluxe"))}");
	}

	private void SetRating(int rating)
	{
		currentRating = rating;
		StateHasChanged();
		Console.WriteLine(currentRating);
	}
    private string GetImageSelectedBooking(string type_category)
    {
        Console.WriteLine($"type_category: {type_category}");
        if (type_category == null) return "/standard/standard-1.jpg";
        if (type_category.ToLower() == "standard")
        {
            return "/standard/standard-1.jpg";
        }
        else if (type_category.ToLower() == "deluxe")
        {
            return "/deluxe/deluxe-3.jpg";
        }
        else if (type_category.ToLower() == "suite")
        {
            return "/suite/suite-3.jpg";
        }
        else
        {
            return "/standard/standard-1.jpg";
        }
    }
    private bool IsExtendDateValid
    {
        get
        {
            if (!newCheckOutDate.HasValue || selectedBooking == null) return false;
            return newCheckOutDate.Value > selectedBooking.rsv_checkout;
        }
    }

    private async Task SubmitReview()
    {
        if (currentRating == 0) return;

        var newReview = new Review
            {
                rsv_id = selectedReviewId,
                guest_id = AppState.CurrentUser.user_id,
                review_rating = currentRating,
                review_feedback = reviewText,
                review_date = DateTime.Now
            };

        await ReviewService.AddReview(newReview);
        //send notification to staffs
        Oasis.Data.Models.Notification notification = new Oasis.Data.Models.Notification();
        notification.notif_title = "New Guest Review";
        notification.notif_content = $"Guest {currentUser.user_fname} {currentUser.user_lname} has left a review.";
        notification.notif_date = DateTime.Now;
        notification.notif_status = "unread";
        await NotificationService.AddNotificationToStaffByPosition(notification, "Admin");
        currentRating = 0;
        reviewText = string.Empty;
        CloseReviewDialog();
        StateHasChanged();
    }

	// protected override async Task OnAfterRenderAsync(bool firstRender)
	// {
	// 	if (firstRender)
	// 	{
	// 		await UserState.LoadUserAsync();
	// 		if (UserState.CurrentUser == null)
 //            {
 //                NavigationManager.NavigateTo("/signin");
 //            }
 //            else
 //            {
 //                currentUser = UserState.CurrentUser;
 //                guestBookings = await ReservationService.GetReservationsByGuestId(currentUser.user_id);
	// 			Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(guestBookings));
 //            }
	// 		StateHasChanged();
	// 	}
	// }
    private decimal GetRoomPrice(string roomType)
    {

        return roomType switch
        {
            "Standard" => 2500,
            "Deluxe" => 5000,
            "Suite" => 7500,
            _ => 0
        };
    }
    

    private void ReviewClicked(int id)
    {
        selectedReviewId = id;
        reviewOpen = true;
        reviewText = string.Empty; // Clear previous review text when opening dialog
        currentRating = 0; // Reset rating when opening dialog
    }

	private void CloseReviewDialog()
	{
		reviewOpen = false;
	}
}
