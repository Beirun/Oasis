@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject UserState UserState
@using Oasis.State;
@using Oasis.Library
@inject NotificationSevices NotificationService
@inject AppState AppState
@using Oasis.Data.Models

<div class="bg-[#fafafa] sticky w-screen py-5 px-10 flex justify-between items-center font-montserrat shadow-md shadow-gray-400/50 top-0 z-100">
    <div class="h-full w-1/2 flex justify-start items-center">
        <div class="flex h-full justify-center items-center">
            <img src="logo.png" alt="Alternate Text" class="pb-2 h-10" />
            <p class="ml-10 @GetNavLinkClass("/dashboard/guest")"><NavLink href="/dashboard/guest">Home</NavLink></p>
            <p class="ml-10 @GetNavLinkClass("/bookings")"><NavLink href="/bookings">Bookings</NavLink></p>
            @* <p class="ml-10 @GetNavLinkClass("/guest/membership")"><NavLink href="/guest/membership">Membership</NavLink></p> *@
        </div>
    </div>
    <div class="h-full flex justify-center items-center">
        <!-- Notification Dropdown -->
        <div class="flex flex-col mr-4">
            <div class="inset-0 fixed z-20" style="@(IsNotificationOpen ? "opacity: 1;" : "opacity: 0; pointer-events:none;")" @onclick='ToggleNotification'>
            </div>

            <div class="divide-y divide-gray-300 w-125 z-21 absolute right-1 mt-15 bg-white rounded-md shadow-lg shadow-black/50 overflow-hidden transition-all duration-200 max-h-[400px] overflow-y-auto" style="@(IsNotificationOpen ? "opacity: 1; transform: translateY(0);" : "opacity: 0; transform: translateY(-10px); pointer-events:none;")">
                @if (notifications.Any())
                {
                    <h4 class="p-3 bg-primary text-center text-white font-semibold text-base ">
                        Notifications (@notifications.Count)
                    </h4>

                    @foreach (var notification in notifications.OrderByDescending(n => n.notif_date))
                    {
                        <div class="w-full p-4 hover:bg-gray-50 transition-colors duration-150">
                            <div class="flex items-start">
                                <div class="w-10 h-10 rounded-full bg-blue-100 flex items-center justify-center mr-3">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                                    </svg>
                                </div>
                                <div class="flex-1">
                                    <div class="flex justify-between items-start">
                                        <p class="font-semibold text-gray-800">@notification.notif_title</p>
                                        <span class="text-xs text-gray-500">@FormatNotificationDate(notification.notif_date)</span>
                                    </div>
                                    <p class="text-sm text-gray-600 mt-1">@notification.notif_content</p>
                                </div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <h4 class="p-3 bg-primary text-center text-white font-semibold text-base">
                        Notifications (@notifications.Count)
                    </h4>
                    <div class="p-4 h-50 flex items-center justify-center text-gray-500">
                        No notifications available
                    </div>
                }
            </div>

            <div class="relative">
                <img @onclick="ToggleNotification" src="/icons/notification.png" alt="Notification" class="w-8 cursor-pointer" />
                @if (notifications.Where(r=> r.notif_status == "unread").Any())
                {
                    <span class="absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center">
                        @notifications.Where(r => r.notif_status == "unread").ToList().Count
                    </span>
                }
            </div>
        </div>

        <!-- Profile Dropdown -->
        <div class="flex flex-col">
            <div class="inset-0 fixed z-20" style="@(IsDropdownOpen ? "opacity: 1;" : "opacity: 0; pointer-events:none;")" @onclick='ToggleDropdown'>
            </div>

            <ul class="divide-y divide-gray-300 z-21 absolute right-1 mt-15 bg-white rounded-md shadow-lg shadow-black/50 overflow-hidden transition-all duration-200 w-48" style="@(IsDropdownOpen ? "opacity: 1; transform: translateY(0);" : "opacity: 0; transform: translateY(-10px); pointer-events:none;")">
                <li @onclick='() => NavigationManager.NavigateTo("/profile/guest")' class="p-3 hover:bg-gray-100 text-gray-700 cursor-pointer transition-colors duration-150 flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                    </svg>
                    Account Profile
                </li>
                <li @onclick="() => Logout()" class="p-3 hover:bg-gray-100 text-gray-700 cursor-pointer transition-colors duration-150 flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                    </svg>
                    Logout
                </li>
            </ul>

            <img @onclick="ToggleDropdown" src="/female-receptionist.png" alt="Profile" class="w-9 h-9 rounded-full cursor-pointer object-cover" />
        </div>
    </div>
</div>

@code {
    private List<Oasis.Data.Models.Notification> notifications = new List<Oasis.Data.Models.Notification>();
    private bool IsDropdownOpen { get; set; } = false;
    private bool IsNotificationOpen { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        if (AppState.CurrentUser == null)
        {
            NavigationManager.NavigateTo("/signin");
            return;
        }

        if (AppState.CurrentUserType.ToLower() != "guest")
        {
            NavigationManager.NavigateTo("/dashboard/" + AppState.CurrentUserType.ToLower());
            return;
        }

        notifications = await NotificationService.GetUserNotifications(AppState.CurrentUser.user_id);
        Console.WriteLine($"Notifications: {System.Text.Json.JsonSerializer.Serialize(notifications)}");
    }

    private string GetNavLinkClass(string route)
    {
        return NavigationManager.Uri.Contains(route)
            ? "text-[#0040A6] font-bold"
            : "text-gray-700 hover:text-blue-500";
    }

    private void ToggleDropdown()
    {
        IsDropdownOpen = !IsDropdownOpen;
        // Close notification if open
        if (IsNotificationOpen) IsNotificationOpen = false;
    }

    private void ToggleNotification()
    {
        IsNotificationOpen = !IsNotificationOpen;
        if (IsNotificationOpen)
        {
            if(notifications.Where(r => r.notif_status == "unread").Any())
            {
                
                notifications.ForEach(async (notification) =>
                {
                    notification.notif_status = "read";
                    bool result = await NotificationService.UpdateNotification(notification);

                });
                StateHasChanged();
            }
        }
        // Close dropdown if open
        if (IsDropdownOpen) IsDropdownOpen = false;
    }

    private string FormatNotificationDate(DateTime? date)
    {
        if (!date.HasValue) return "Just now";

        var timeSpan = DateTime.Now - date.Value;

        if (timeSpan.TotalSeconds < 60)
            return "Just now";
        if (timeSpan.TotalMinutes < 60)
            return $"{(int)timeSpan.TotalMinutes} min ago";
        if (timeSpan.TotalHours < 24)
            return $"{(int)timeSpan.TotalHours} hour{(timeSpan.TotalHours >= 2 ? "s" : "")} ago";
        if (timeSpan.TotalDays < 30)
            return $"{(int)timeSpan.TotalDays} day{(timeSpan.TotalDays >= 2 ? "s" : "")} ago";

        return date.Value.ToString("MMM dd, yyyy");
    }

    private async Task Logout()
    {
        AppState.ClearUser();
        await UserState.ClearUserAsync();
        NavigationManager.NavigateTo("/signin");
    }
}