@page "/signin"
@inject AppState appState
@inject SignInServices SignInService
@inject NavigationManager Navigation
@inject SonnerState toast
@inject UserState UserState
@using Data.Models
@using Oasis.Library
@using Oasis.State
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer
@using Oasis.Components.ui
@* <Toast Show="@toast.show" Style="padding: 0"> *@
@*     <div class="flex" style="@(toast.type == "error" ? "background-color:#B40000 !important; color: #FFFFFF !important" : "background-color:#0C7500 !important; color: #FFFFFF !important" ); padding: 1rem"> *@
@*         <div class="flex-col g4"> *@
@*             <p class="text-md" style="background-color: inherit; color: inherit">@toast.title</p> *@
@*             <p class="text-sm">@toast.message</p> *@
@*         </div> *@
@*     </div> *@
@* </Toast> *@
@* @if (toast.show) *@
@* { *@
@*     <div class="toast-container" style="position: fixed; top: 20px; right: 20px; z-index: 1000;"> *@
@*         <div class="toast @toast.type" *@
@*              style="@(toast.type == "error" ? "background-color:#B40000; color: #FFFFFF" : "background-color:#0C7500; color: #FFFFFF"); *@
@*                     padding: 1rem; border-radius: 4px; box-shadow: 0 2px 10px rgba(0,0,0,0.2); min-width: 300px;"> *@
@*             <div class="toast-header"> *@
@*                 <strong class="me-auto">@toast.title</strong> *@
@*             </div> *@
@*             <div class="toast-body"> *@
@*                 @toast.message *@
@*             </div> *@
@*         </div> *@
@*     </div> *@
@* } *@
<div class="h-screen w-screen flex justify-center items-center bg-[url('clouds.png')] bg-cover">
    <div class="h-6/7 w-2/3 bg-[#e8e8e8] flex rounded-lg shadow-md shadow-gray-600/50">
        <div class="h-full w-1/2 flex flex-col items-center justify-center">
            <div class="text-4xl text-primary mt-5 font-montserrat font-bold my-15">
                SIGN IN
            </div>
            <div class="flex flex-col gap-10 justify-center items-center w-100">
                <CustomInput @bind-Value="email" type="text" placeholder="Email" class="w-85"/>
                <CustomInput @bind-Value="password" type="password" placeholder="Password" class="w-85" />

            </div>
            <div class="flex flex-col gap-10 justify-center items-center w-100 my-15 h-10">
                <button @onclick="LoginGuest" type="submit" class="w-85 h-full rounded-md text-white bg-[#0040a6] hover:bg-[#0040a6]/80 flex items-center justify-center transition-colors duration-300 cursor-pointer">
                    @if(isSigningIn){
                        <spane>Signing In</spane>
                    }else
                    {
                        <spane>Sign In</spane>
                    }
                </button>
            </div>
            <div>
                Don't have an account? <NavLink href="signup" class="text-primary transition-colors duration-200 hover:underline hover:text-primary/80 ">Sign Up Here!</NavLink>
            </div>
        </div>
        <div class="rounded-r-md h-full w-1/2 bg-[url('signin-bg.jpg')] bg-cover ">

        </div>
    </div>

    @* <Sonner OnActionClick="() => showSonner = false" show="@showSonner" ActionName="Close" title="@sonnerTitle" Description="@sonnerMessage"  /> *@
</div> 

@code {
    private bool isSigningIn = false;
    private string email = "";
    private string password = "";
    // private string sonnerTitle = "";
    // private string sonnerMessage = "";
    // private bool showSonner = false;
    // private void ShowSonner(string title, string message){
    //     sonnerTitle = title;
    //     sonnerMessage = message;
    //     showSonner = true;
    // }
    protected override async Task OnInitializedAsync()
    {
        if(appState.CurrentUser != null)
        {
            Navigation.NavigateTo("/dashboard/"+appState.CurrentUserType.ToLower());
        }
    }
    private async Task Login()
    {
        isSigningIn = true;
        await LoginGuest();

    }
    private async Task LoginGuest()
    {
        KeyValuePair<bool, string> result = await SignInService.checkUser(email,password);
        // if (!emailExists)
        // {
        //     Console.WriteLine("Email does not exist");
        //     ShowSonner("Login Failed", "Email does not exist");
        //     return;


        // }
        // bool passwordMatch = await SignInService.checkPassword(email, password);
        // if (!passwordMatch)
        // {
        //     ShowSonner("Login Failed", "Password does not match");
        //     Console.WriteLine("Password does not match");
        //     return;
        // }
        // ShowSonner("Login Success", "Logged in successfully");
        // string userType = await SignInService.getUserType(email);
        if (!result.Key){
            // ShowSonner("Login Failed", result.Value);
            toast.Error("Login Failed", result.Value);
            Console.WriteLine(result.Value);
            Console.WriteLine($"Error: {toast.message}");
            isSigningIn = false;
            return;
        }
        var user = await SignInService.getUser(email);
        await UserState.SetCurrentUserAsync(user);
        await UserState.SetCurrentUserTypeAsync(result.Value);
        appState.SetCurrentUser(user);
        appState.SetCurrentUserType(result.Value);
        isSigningIn = false;
            toast.Success("Login Success", "Logged in successfully");
            Console.WriteLine(toast.message);
        Navigation.NavigateTo("/dashboard/" + result.Value.ToLower());
    }

}
