@page "/signin"
@inject SignInServices SignInService
@inject NavigationManager Navigation
@inject UserState UserState
@using Data.Models
@using Oasis.Library
@using Oasis.State
@using Microsoft.EntityFrameworkCore
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@using Oasis.Components.ui
<div class="h-screen w-screen flex justify-center items-center bg-[url('clouds.png')] bg-cover">
    <div class="h-6/7 w-2/3 bg-[#e8e8e8] flex rounded-lg shadow-md shadow-gray-600/50">
        <div class="h-full w-1/2 flex flex-col items-center justify-center">
            <div class="text-4xl text-primary mt-5 font-montserrat font-bold my-15">
                SIGN IN
            </div>
            <div class="flex flex-col gap-10 justify-center items-center w-100">
                <CustomInput @bind-Value="email" type="text" placeholder="Email" class="w-85"/>
                <CustomInput @bind-Value="password" type="password" placeholder="Password" class="w-85" />

            </div>
            <div class="flex flex-col gap-10 justify-center items-center w-100 my-15 h-10">
                <button @onclick="LoginGuest" type="submit" class="w-85 h-full rounded-md text-white bg-[#0040a6] hover:bg-[#0040a6]/80 transition-colors duration-300 cursor-pointer">Sign In</button>
            </div>
            <div>
                Don't have an account? <NavLink href="signup" class="text-primary transition-colors duration-200 hover:underline hover:text-primary/80 ">Sign Up Here!</NavLink>
            </div>
        </div>
        <div class="rounded-r-md h-full w-1/2 bg-[url('signin-bg.jpg')] bg-cover ">

        </div>
    </div>

    @* <Sonner OnActionClick="() => showSonner = false" show="@showSonner" ActionName="Close" title="@sonnerTitle" Description="@sonnerMessage"  /> *@
</div> 

@code {
    private string email = "";
    private string password = "";
    // private string sonnerTitle = "";
    // private string sonnerMessage = "";
    // private bool showSonner = false;
    // private void ShowSonner(string title, string message){
    //     sonnerTitle = title;
    //     sonnerMessage = message;
    //     showSonner = true;
    // }

    private async Task LoginGuest()
    {
        KeyValuePair<bool, string> result = await SignInService.checkUser(email,password);
        // if (!emailExists)
        // {
        //     Console.WriteLine("Email does not exist");
        //     ShowSonner("Login Failed", "Email does not exist");
        //     return;


        // }
        // bool passwordMatch = await SignInService.checkPassword(email, password);
        // if (!passwordMatch)
        // {
        //     ShowSonner("Login Failed", "Password does not match");
        //     Console.WriteLine("Password does not match");
        //     return;
        // }
        // ShowSonner("Login Success", "Logged in successfully");
        // string userType = await SignInService.getUserType(email);
        if (!result.Key){
            // ShowSonner("Login Failed", result.Value);
            Console.WriteLine(result.Value);
            return;
        }

        await UserState.SetCurrentUserAsync(await SignInService.getUser(email));
        Navigation.NavigateTo("/dashboard/" + result.Value.ToLower());
    }

}
