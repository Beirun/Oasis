@page "/bookings/all"
@rendermode InteractiveServer
@using Oasis.Components.ui
@using System.Text.Json
@using Oasis.Library;
@using Oasis.State;
@using Oasis.Data.Object;
@using Oasis.Data.Models;
@using Microsoft.EntityFrameworkCore;
@inject NavigationManager NavigationManager
@inject ReservationServices ReservationService
@inject RoomServices roomServices

<div class="w-screen min-h-screen flex flex-col justify-start bg-background font-montserrat">
    <Navbar/>

    <div class="w-[75%] flex flex-col justify-between items-center my-4">
        <div class="flex flex-row w-full justify-between">
            <div class="w-[51%] h-80 bg-white p-5 shadow-xs shadow-gray-500/50 border-b-2 border-gray-400 rounded-2xl">
                <div class="w-full flex flex-col">
                    <p class="text-3xl font-bold w-full">Weekly Bookings</p>
                </div>
                <div class="w-full">
                    <CustomChart>
                        <div class="w-[720px] absolute -ml-6 -mt-10 ">
                            <Chart Option="@verticalBarOption" Width="725px" Height="310px" />

                        </div>
                    </CustomChart>
                </div>
            </div>
            <div class="w-[49%] h-80 bg-white p-5 shadow-xs shadow-gray-500/50 border-b-2 border-gray-400 rounded-2xl">
                <div class="w- flex flex-col">
                    <p class="text-3xl font-bold w-full">Bookings</p>
                    
                </div>
                <div class="w-full">
                    <CustomChart>
                        <div class="w-[720px] absolute -ml-6   -mt-12 ">
                            <Chart Option="@horizontalBarOption" Width="740px" Height="330px" />

                        </div>
                    </CustomChart>
                </div>
            </div>
        </div>
        <div class="flex flex-row w-full">
            <div class="w-full flex justify-between">
                <div class="flex">


                    <Icon Name="Search" size="30px" Color="gray" Class="absolute ml-4 pointer-events-none focus:outline-none" />
                    <input type="text" name="name" placeholder="Search Check-Ins"
                    class=" shadow-xs shadow-gray-500/50  duration-250 bg-white focus:outline-none w-175 pl-12.5 text-lg p-2 px-4 rounded-md border-b-2 border-gray-400 focus:border-gray-500" />

                    @* <div class="flex flex-col"> *@
                    @*   <div class="inset-0 fixed z-20 " style="@(IsDropdownOpen ? "opacity: 1;" : "opacity: 0; pointer-events:none;")" @onclick='CloseDropdown'> *@
                    @*   </div> *@

                    @*   <ul class="z-21 absolute mt-13 bg-[#fafafa] rounded-md shadow-md shadow-black/50 overflow-hidden transition-all duration-200" style="@(IsDropdownOpen ? "opacity: 1;" : "opacity: 0; pointer-events:none;")"> *@
                    @*       @foreach (var position in staffPositions) *@
                    @*       { *@
                    @*           <li @onclick="() => SelectFilter(position)" class="p-2 px-4 hover:bg-primary/40 hover:text-gray-800 px-6 hover:text-gray-100 cursor-pointer transition-all duration-200">@position</li> *@
                    @*       } *@
                    @*   </ul> *@
                    <button class="cursor-pointer transition-all duration-200 hover:bg-white/20 bg-white shadow-sm shadow-gray-500/50 flex justify-center items-center focus:outline-none border-b-2 border-gray-400 p-2 rounded-md px-6 ml-10"> <Icon Name="Filter_List" Size="30px" /> Filter</button>
                    @* </div> *@
                </div>
            </div>
        </div>

    </div>
    <div class="w-[75%] h-[1px] bg-[#C0C0C0]"></div>
    <div class="w-[75%] bg-white p-5 shadow-gray-500/50 border-b-2 divide-gray-400 rounded-2xl">
        <table class="w-full text-sm rounded-2xl  divide-y-2 divide-gray-300">
            <tr class="w-full text-[#6B7280] border-b-2 border-gray-400">
                <td class="h-10">Guest</td>
                <td class="h-10">Room</td>
                <td class="h-10">Room Type</td>
                <td class="h-10">Check In</td>
                <td class="h-10">Check Out</td>
                <td class="h-10">Status</td>
            </tr>
            @foreach (var booking in bookings)
            {
                <tr class="h-20 ">
                    <td class="flex flex-row h-20 justify-center">
                        <div class="size-10 w-11 rounded-full bg-[url('/clouds.png')] bg-cover"></div>
                        <div class="flex flex-col justify-between w-full">
                            <p class="w-full -mb-4 font-semibold">@booking.user_fname @booking.user_lname</p>
                            <p class="w-full text-[#6B7280]">@booking.user_email</p>
                        </div>
                    </td>
                    <td>
                        <p class="w-full">Room @booking.room_no</p>
                    </td>
                    <td>
                        <p class="w-full">@booking.type_category</p>
                    </td>
                    <td>
                        <p class="w-full">@booking.rsv_checkin</p>
                    </td>
                    <td>
                        <p class="w-full">@booking.rsv_checkout</p>
                    </td>
                    <td>
                        <div class="w-25 h-[25px] bg-primary flex justify-center p-2 rounded-full">
                            <p class="text-white">@booking.rsv_status</p>
                        </div>
                    </td>
                </tr>
            }
            
        </table>
    </div>

</div>

@code {
    private List<Booking> bookings = new List<Booking>();
    private string chartColor = "#0062FF";
    private string? verticalBarOption, horizontalBarOption;

    public void HorizontalBarChartInitialize(Dictionary<string, int> data)
    {
        var option = new
        {
            tooltip = new
            {
                trigger = "axis",
                axisPointer = new { type = "shadow" }, // Better hover effect
                formatter = "{b}: {c}" // Shows "Month: Value"
            },
            xAxis = new
            {
                type = "value"
            },
            yAxis = new
            {
                type = "category",
                data = data.Keys.ToArray()
            },
            series = new[]
    {
        new
        {
            type = "bar",
            data = data.Values.ToArray(),
            itemStyle = new
            {
                color = chartColor, // Red bars
                borderColor = chartColor, // White borders
                borderWidth = 1
            },
            barWidth = "60%", // Adjust bar thickness
            label = new
            {
                show = true,
                position = "right", // Values on the right of bars
                formatter = "{c}"
            }
        }
    }
        };


        horizontalBarOption = JsonSerializer.Serialize(option);
        Console.WriteLine(horizontalBarOption);
    }
    public void VerticalBarChartInitialize(Dictionary<string, Dictionary<string, int>> data)
    {
        
        // Extract all unique status types from the data
        var statusTypes = new HashSet<string>();
        foreach (var day in data.Values)
        {
            foreach (var status in day.Keys)
            {
                statusTypes.Add(status);
            }
        }

        // Prepare series data
        var series = new List<object>();
        var colors = new Dictionary<string, string>
    {
        { "Booked", "#0062FF" },
        { "Checked In", "#4A3AFF" },
        { "Checked Out", "#E0C6FD" },
        { "Cancelled", "#93AAFD" }
    };

        foreach (var status in statusTypes)
        {
            var statusData = new List<int>();
            foreach (var day in data)
            {
                day.Value.TryGetValue(status, out var count);
                statusData.Add(count);
            }

            series.Add(new
            {
                name = status,
                type = "bar",
                data = statusData.ToArray(),
                itemStyle = new { color = colors.TryGetValue(status, out var color) ? color : "#999999" }
            });
        }

        var option = new
        {
            tooltip = new
            {
                trigger = "axis",
                axisPointer = new { type = "shadow" }
            },
            legend = new
            {
                data = statusTypes.ToArray(),
                right = "15",
                top = "15"
            },
            grid = new
            {
                left = "3%",
                right = "4%",
                bottom = "3%",
                containLabel = true
            },
            xAxis = new
            {
                type = "category",
                data = data.Keys.ToArray(),
                axisLabel = new
                {
                    interval = 0,
                    rotate = 30 // Rotate labels if needed
                }
            },
            yAxis = new
            {
                type = "value"
            },
            series = series.ToArray()
        };


        verticalBarOption = JsonSerializer.Serialize(option);
        Console.WriteLine(verticalBarOption);
    }


    protected override async Task OnInitializedAsync()
    {
        bookings = await ReservationService.GetReservations();
        Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(bookings));
        Dictionary<string, Dictionary<string, int>> weeklyBookings = new Dictionary<string, Dictionary<string, int>>();
        Dictionary<string, int> bookedRoomsPerRoomType = new Dictionary<string, int>();
        bookedRoomsPerRoomType = await roomServices.GetTotalNumberOfReservationsPerType();
        weeklyBookings = await ReservationService.GetBookingsPast7Days();
        HorizontalBarChartInitialize(bookedRoomsPerRoomType);
        VerticalBarChartInitialize(weeklyBookings);
    }

}
