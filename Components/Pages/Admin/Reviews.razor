@page "/feedback/all"
@rendermode InteractiveServer
@using Oasis.State
@using Oasis.Components.ui
@using System.Text.Json
@using Oasis.Data.Object
@using Oasis.Library

@inject NavigationManager NavigationManager
@inject ReviewServices ReviewService

<div class="w-screen min-h-screen flex flex-col justify-start bg-background font-montserrat">
    <Navbar/>
    <div class="w-[75%] flex flex-col justify-between items-center my-4">
        <div class="flex flex-row w-full justify-between">
            <div class="w-[51%] h-60 bg-white p-5 shadow-xs shadow-gray-500/50 border-b-2 border-gray-400 rounded-2xl">
                <div class="w-full flex flex-col">
                    <p class="text-3xl font-bold w-full">Average Ratings</p>
                    <CustomChart>
                        <div class="w-[720px] absolute -ml-6  ">
                            <Chart Option="@horizontalBarOption" Width="780px" Height="250px" />

                        </div>
                    </CustomChart>
                </div>
            </div>
            <div class="w-[49%] h-60 bg-white p-5 shadow-xs shadow-gray-500/50 border-b-2 border-gray-400 rounded-2xl">
                <div class="w-full flex flex-col">
                    <p class="text-3xl font-bold w-full">Room Ratings</p>
                    <CustomChart>
                        <div class="w-[720px] ml-2 absolute ">
                            <Chart Option="@verticalBarOption" Width="700px" Height="215px" />

                        </div>
                    </CustomChart>
                </div>
            </div>
        </div>
        <div class="flex flex-row w-full">
            <div class="w-full flex justify-between">
                <div class="flex">


                    <Icon Name="Search" size="30px" Color="gray" Class="absolute ml-4 pointer-events-none focus:outline-none" />
                    <input type="text" name="name" placeholder="Search review..."
                    class=" shadow-xs shadow-gray-500/50  duration-250 bg-white focus:outline-none w-175 pl-12.5 text-lg p-2 px-4 rounded-md border-b-2 border-gray-400 focus:border-gray-500" />

                    @* <div class="flex flex-col"> *@
                    @*   <div class="inset-0 fixed z-20 " style="@(IsDropdownOpen ? "opacity: 1;" : "opacity: 0; pointer-events:none;")" @onclick='CloseDropdown'> *@
                    @*   </div> *@

                    @*   <ul class="z-21 absolute mt-13 bg-[#fafafa] rounded-md shadow-md shadow-black/50 overflow-hidden transition-all duration-200" style="@(IsDropdownOpen ? "opacity: 1;" : "opacity: 0; pointer-events:none;")"> *@
                    @*       @foreach (var position in staffPositions) *@
                    @*       { *@
                    @*           <li @onclick="() => SelectFilter(position)" class="p-2 px-4 hover:bg-primary/40 hover:text-gray-800 px-6 hover:text-gray-100 cursor-pointer transition-all duration-200">@position</li> *@
                    @*       } *@
                    @*   </ul> *@
                    <button class="cursor-pointer transition-all duration-200 hover:bg-white/20 bg-white shadow-sm shadow-gray-500/50 flex justify-center items-center focus:outline-none border-b-2 border-gray-400 p-2 rounded-md px-6 ml-10"> <Icon Name="Filter_List" Size="30px" /> Filter</button>
                    <button class="cursor-pointer transition-all duration-200 hover:bg-white/20 bg-white shadow-sm shadow-gray-500/50 flex justify-center items-center focus:outline-none border-b-2 border-gray-400 p-2 rounded-md px-3 ml-10"> <Icon Name="swap_vert" Size="30px" /> Sort by</button>
                    @* </div> *@
                </div>
            </div>
        </div>

    </div>
    <div class="w-[75%] h-[1px] bg-[#C0C0C0]"></div>
    <div class="w-[75%] mb-8 bg-white p-5 shadow-gray-500 rounded-2xl">
        <div class="w-full flex flex-col">
            @foreach (var review in roomTypeReviews)
            {
                <div class="w-full border border-gray-200 rounded-lg p-6 shadow-md w-300">
                    <div class="flex justify-between items-start mb-4">
                        <div>
                            <h3 class="text-lg font-semibold">@review.user_fname @review.user_lname</h3>
                            <p class="text-sm text-gray-500">@review.review_date?.ToString("MMMM dd, yyyy")</p>
                        </div>
                        <div class="flex">
                            @for (int i = 1; i <= 5; i++)
                            {
                                <span class="text-xl @(i <= review.review_rating ? "text-yellow-400" : "text-gray-300")">★</span>
                            }
                        </div>
                    </div>
                    <p class="text-gray-700">@review.review_feedback</p>
                </div>
            }
        </div>

    </div>
</div>

@code {
    private string chartColor = "#0062FF";
    private string? verticalBarOption, horizontalBarOption;
    private List<RoomTypeReview> roomTypeReviews = new List<RoomTypeReview>();

    public void HorizontalBarChartInitialize(Dictionary<string, double> data)
    {
        var option = new
        {
            tooltip = new
            {
                trigger = "axis",
                axisPointer = new { type = "shadow" }, // Better hover effect
                formatter = "{b}: {c}" // Shows "Month: Value"
            },
            xAxis = new
            {
                type = "value"
            },
            yAxis = new
            {
                type = "category",
                data = data.Keys.ToArray(),
            },
            series = new[]
    {
    new
    {
        type = "bar",
        data = data.Values.ToArray(),
        itemStyle = new
        {
            color = chartColor, 
            borderColor = chartColor, 
            borderWidth = 1
        },
        barWidth = "60%", // Adjust bar thickness
        label = new
        {
            show = true,
            position = "right", 
            formatter = "{c}"
        }
    }
}
        };


        horizontalBarOption = JsonSerializer.Serialize(option);
        Console.WriteLine(horizontalBarOption);
    }
    public void VerticalBarChartInitialize(Dictionary<int, Dictionary<string, int>> data)
    {
        // Extract all room types from the first rating level (they should be the same for all)
        var roomTypes = data.First().Value.Keys.ToArray();

        // Prepare series data for each room type
        var series = new List<object>();

        // Color mapping for each room type
        var colors = new Dictionary<string, string>
    {
        { "Standard", "#0062FF" },
        { "Deluxe", "#4A3AFF" },
        { "Suite", "#E0C6FD" }
        // Add more room types and colors as needed
    };

        foreach (var roomType in roomTypes)
        {
            // Get the counts for this room type across all ratings (1-5)
            var counts = data
                .OrderBy(r => r.Key) // Ensure ratings are ordered 1-5
                .Select(r => r.Value.TryGetValue(roomType, out var count) ? count : 0)
                .ToArray();

            series.Add(new
            {
                name = roomType,
                type = "bar",
                data = counts,
                itemStyle = new { color = colors.TryGetValue(roomType, out var color) ? color : "#999999" }
            });
        }

        var option = new
        {
            tooltip = new
            {
                trigger = "axis",
                axisPointer = new { type = "shadow" }
            },
            legend = new
            {
                data = roomTypes,
                right = "50",
                top = "10"
            },
            grid = new
            {
                left = "3%",
                right = "4%",
                bottom = "3%",
                containLabel = true
            },
            xAxis = new
            {
                type = "category",
                data = data.Keys.OrderBy(r => r).Select(r => r.ToString()).ToArray(),
                axisLabel = new
                {
                    interval = 0
                }
            },
            yAxis = new
            {
                type = "value",
            },
            series = series.ToArray()
        };

        verticalBarOption = JsonSerializer.Serialize(option, new JsonSerializerOptions
            {
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
                WriteIndented = true
            });

        Console.WriteLine(verticalBarOption);
    }
    protected override async Task OnInitializedAsync()
    {
        Dictionary<string, double> averageRatings = new Dictionary<string, double>();
        Dictionary<int, Dictionary<string, int>> roomRatings = new Dictionary<int, Dictionary<string, int>>();
        averageRatings = await ReviewService.GetAverageRatingsPerRoomType();
        roomTypeReviews = await ReviewService.GetRoomReviews();
        roomRatings = await ReviewService.GetRatingCountsByRoomType();
        HorizontalBarChartInitialize(averageRatings);  
        VerticalBarChartInitialize(roomRatings);
    }

}
